name: PR checks

on:
  pull_request: {}
  push:
    branches:
    - main

jobs:
  it_runs:
    name: Run tests against reference implementation
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        architecture: "x64"
    - uses: vmware-tanzu/carvel-setup-action@v1
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up kubeconfig
      run: |
        KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig
        echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV
    - name: Set up minikube
      uses: medyagh/setup-minikube@latest
      env:
        KUBECONFIG: ${{ env.KUBECONFIG }}
    - name: Push dependencies
      run: |
        eval $(minikube docker-env)
        docker build -t ghcr.io/${{ github.repository }}/generic-test-app:main resources/apps/generic-test-app

        # install the reference implementation
        kapp deploy -y -a cert-manager -f https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.yaml
        kapp deploy -y -a servicebinding-runtime -f https://github.com/servicebinding/runtime/releases/download/v0.2.0/servicebinding-runtime-v0.2.0.yaml -f https://github.com/servicebinding/runtime/releases/download/v0.2.0/servicebinding-workloadresourcemappings-v0.2.0.yaml
    - name: Conformance tests
      run: .github/resources/run_ci.sh
    - name: Collect diagnostics
      run: |
        set +o errexit
        set -o nounset
        set +o pipefail

        echo "##[group]kubectl get all -n servicebindings-cts"
          kubectl get all -n servicebindings-cts
        echo "##[endgroup]"
        echo "##[group]kubectl describe deployments.apps -n servicebindings-cts"
          kubectl describe deployments.apps -n servicebindings-cts
        echo "##[endgroup]"
        echo "##[group]kubectl get servicebindings.servicebinding.io -A"
          kubectl get servicebindings.servicebinding.io -A
        echo "##[endgroup]"
        echo "##[group]kubectl describe servicebindings.servicebinding.io -A"
          kubectl describe servicebindings.servicebinding.io -A
        echo "##[endgroup]"
        echo "##[group]kubectl get clusterworkloadresourcemappings.servicebinding.io"
          kubectl get clusterworkloadresourcemappings.servicebinding.io
        echo "##[endgroup]"
        
      if: always()
      continue-on-error: true
  
  linting:
    name: Lint checks
    runs-on: ubuntu-20.04
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        architecture: "x64"
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Run linting checks
      run: |
        ./setup.sh
        hack/lint-python-code.sh
